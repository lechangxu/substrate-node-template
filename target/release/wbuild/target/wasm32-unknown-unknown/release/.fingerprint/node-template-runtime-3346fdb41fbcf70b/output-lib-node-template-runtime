{"message":"failed to resolve: use of undeclared crate or module `pallet_nicks`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/ubuntu/substrate-node-template/runtime/src/lib.rs","byte_start":9695,"byte_end":9707,"line_start":302,"line_end":302,"column_start":6,"column_end":18,"is_primary":true,"text":[{"text":"impl pallet_nicks::Trait for Runtime {","highlight_start":6,"highlight_end":18}],"label":"use of undeclared crate or module `pallet_nicks`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `pallet_nicks`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ubuntu/substrate-node-template/runtime/src/lib.rs:302:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m302\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl pallet_nicks::Trait for Runtime {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `pallet_nicks`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `pallet_nicks`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/ubuntu/substrate-node-template/runtime/src/lib.rs","byte_start":11621,"byte_end":11633,"line_start":350,"line_end":350,"column_start":10,"column_end":22,"is_primary":true,"text":[{"text":"\t\tNicks: pallet_nicks::{Module, Call, Storage, Event<T>},","highlight_start":10,"highlight_end":22}],"label":"use of undeclared crate or module `pallet_nicks`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `pallet_nicks`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ubuntu/substrate-node-template/runtime/src/lib.rs:350:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m350\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Nicks: pallet_nicks::{Module, Call, Storage, Event<T>},\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `pallet_nicks`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `pallet_nicks`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.0/src/event.rs","byte_start":14333,"byte_end":14338,"line_start":539,"line_end":539,"column_start":20,"column_end":25,"is_primary":true,"text":[{"text":"\t\t\t\t\t$module_name::Event ::< $( $generic_params ),* > ::metadata()","highlight_start":20,"highlight_end":25}],"label":"not found in `pallet_nicks`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.0/src/event.rs","byte_start":13863,"byte_end":14006,"line_start":521,"line_end":524,"column_start":4,"column_end":5,"is_primary":false,"text":[{"text":"\t\t\t$crate::__impl_outer_event_json_metadata! {","highlight_start":4,"highlight_end":47},{"text":"\t\t\t\t@DECL_MODULE_EVENT_FNS","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $module_name < $( $generic_params ),* > $( $instance )? ; )*","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.0/src/event.rs","byte_start":12943,"byte_end":13147,"line_start":483,"line_end":491,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::__impl_outer_event_json_metadata!(","highlight_start":3,"highlight_end":45},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$module_name::Event","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t< $( $generic_param )? $(, $module_name::$generic_instance )? >","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t$( $generic_instance )?,","highlight_start":1,"highlight_end":29},{"text":"\t\t\t)*;","highlight_start":1,"highlight_end":7},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.0/src/event.rs","byte_start":10799,"byte_end":10985,"line_start":401,"line_end":407,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::impl_outer_event!(","highlight_start":3,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_generic )* };","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $parsed )* $module::Event<$runtime> index { $( $index )? }, };","highlight_start":1,"highlight_end":71},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.0/src/event.rs","byte_start":10799,"byte_end":10985,"line_start":401,"line_end":407,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::impl_outer_event!(","highlight_start":3,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_generic )* };","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $parsed )* $module::Event<$runtime> index { $( $index )? }, };","highlight_start":1,"highlight_end":71},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.0/src/event.rs","byte_start":11228,"byte_end":11419,"line_start":420,"line_end":426,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::impl_outer_event!(","highlight_start":3,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_no_generic_no_instance )* };","highlight_start":1,"highlight_end":57},{"text":"\t\t\t{ $( $parsed )* $module::Event index { $( $index )? }, };","highlight_start":1,"highlight_end":61},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.0/src/event.rs","byte_start":9598,"byte_end":9713,"line_start":344,"line_end":350,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::impl_outer_event!(","highlight_start":3,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_events )* };","highlight_start":1,"highlight_end":35},{"text":"\t\t\t{};","highlight_start":1,"highlight_end":7},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ubuntu/substrate-node-template/runtime/src/lib.rs","byte_start":10654,"byte_end":11675,"line_start":329,"line_end":352,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"construct_runtime!(","highlight_start":1,"highlight_end":20},{"text":"\tpub enum Runtime where","highlight_start":1,"highlight_end":24},{"text":"\t\tBlock = Block,","highlight_start":1,"highlight_end":17},{"text":"\t\tNodeBlock = opaque::Block,","highlight_start":1,"highlight_end":29},{"text":"\t\tUncheckedExtrinsic = UncheckedExtrinsic","highlight_start":1,"highlight_end":42},{"text":"\t{","highlight_start":1,"highlight_end":3},{"text":"\t\tSystem: frame_system::{Module, Call, Config, Storage, Event<T>},","highlight_start":1,"highlight_end":67},{"text":"\t\tRandomnessCollectiveFlip: pallet_randomness_collective_flip::{Module, Call, Storage},","highlight_start":1,"highlight_end":88},{"text":"\t\tTimestamp: pallet_timestamp::{Module, Call, Storage, Inherent},","highlight_start":1,"highlight_end":66},{"text":"\t\tAura: pallet_aura::{Module, Config<T>, Inherent},","highlight_start":1,"highlight_end":52},{"text":"\t\tGrandpa: pallet_grandpa::{Module, Call, Storage, Config, Event},","highlight_start":1,"highlight_end":67},{"text":"\t\tBalances: pallet_balances::{Module, Call, Storage, Config<T>, Event<T>},","highlight_start":1,"highlight_end":75},{"text":"\t\tTransactionPayment: pallet_transaction_payment::{Module, Storage},","highlight_start":1,"highlight_end":69},{"text":"\t\tSudo: pallet_sudo::{Module, Call, Config<T>, Storage, Event<T>},","highlight_start":1,"highlight_end":67},{"text":"\t\t// Include the custom logic from the template pallet in the runtime.","highlight_start":1,"highlight_end":71},{"text":"\t\tTemplateModule: pallet_template::{Module, Call, Storage, Event<T>},","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tKittiesModule: pallet_kitties::{Module, Call, Storage, Event<T>},","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tPoeModule: pallet_poe::{Module, Call, Storage, Event<T>},","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tNicks: pallet_nicks::{Module, Call, Storage, Event<T>},","highlight_start":1,"highlight_end":58},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ubuntu/substrate-node-template/runtime/src/lib.rs","byte_start":10654,"byte_end":11675,"line_start":329,"line_end":352,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"construct_runtime!(","highlight_start":1,"highlight_end":20},{"text":"\tpub enum Runtime where","highlight_start":1,"highlight_end":24},{"text":"\t\tBlock = Block,","highlight_start":1,"highlight_end":17},{"text":"\t\tNodeBlock = opaque::Block,","highlight_start":1,"highlight_end":29},{"text":"\t\tUncheckedExtrinsic = UncheckedExtrinsic","highlight_start":1,"highlight_end":42},{"text":"\t{","highlight_start":1,"highlight_end":3},{"text":"\t\tSystem: frame_system::{Module, Call, Config, Storage, Event<T>},","highlight_start":1,"highlight_end":67},{"text":"\t\tRandomnessCollectiveFlip: pallet_randomness_collective_flip::{Module, Call, Storage},","highlight_start":1,"highlight_end":88},{"text":"\t\tTimestamp: pallet_timestamp::{Module, Call, Storage, Inherent},","highlight_start":1,"highlight_end":66},{"text":"\t\tAura: pallet_aura::{Module, Config<T>, Inherent},","highlight_start":1,"highlight_end":52},{"text":"\t\tGrandpa: pallet_grandpa::{Module, Call, Storage, Config, Event},","highlight_start":1,"highlight_end":67},{"text":"\t\tBalances: pallet_balances::{Module, Call, Storage, Config<T>, Event<T>},","highlight_start":1,"highlight_end":75},{"text":"\t\tTransactionPayment: pallet_transaction_payment::{Module, Storage},","highlight_start":1,"highlight_end":69},{"text":"\t\tSudo: pallet_sudo::{Module, Call, Config<T>, Storage, Event<T>},","highlight_start":1,"highlight_end":67},{"text":"\t\t// Include the custom logic from the template pallet in the runtime.","highlight_start":1,"highlight_end":71},{"text":"\t\tTemplateModule: pallet_template::{Module, Call, Storage, Event<T>},","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tKittiesModule: pallet_kitties::{Module, Call, Storage, Event<T>},","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tPoeModule: pallet_poe::{Module, Call, Storage, Event<T>},","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tNicks: pallet_nicks::{Module, Call, Storage, Event<T>},","highlight_start":1,"highlight_end":58},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"construct_runtime!","def_site_span":{"file_name":"/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-procedural-2.0.0/src/lib.rs","byte_start":12476,"byte_end":12535,"line_start":300,"line_end":300,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn construct_runtime(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"self::sp_api_hidden_includes_construct_runtime::hidden_include::impl_outer_event!","def_site_span":{"file_name":"/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.0/src/event.rs","byte_start":9356,"byte_end":13152,"line_start":335,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_outer_event {","highlight_start":1,"highlight_end":32},{"text":"\t// Macro transformations (to convert invocations with incomplete parameters to the canonical","highlight_start":1,"highlight_end":94},{"text":"\t// form)","highlight_start":1,"highlight_end":10},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub enum $name:ident for $runtime:ident {","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( $rest_events:tt )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_events )* };","highlight_start":1,"highlight_end":35},{"text":"\t\t\t{};","highlight_start":1,"highlight_end":7},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Generic + Instance","highlight_start":1,"highlight_end":23},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident $instance:ident<T>,","highlight_start":1,"highlight_end":71},{"text":"\t\t\t$( $rest_event_generic_instance:tt )*","highlight_start":1,"highlight_end":41},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_generic_instance )* };","highlight_start":1,"highlight_end":51},{"text":"\t\t\t{ $( $parsed )* $module::Event<$runtime>{ $instance } index { $( $index )? }, };","highlight_start":1,"highlight_end":84},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Instance","highlight_start":1,"highlight_end":13},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident $instance:ident,","highlight_start":1,"highlight_end":68},{"text":"\t\t\t$( $rest_event_instance:tt )*","highlight_start":1,"highlight_end":33},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_instance )* };","highlight_start":1,"highlight_end":43},{"text":"\t\t\t{ $( $parsed )* $module::Event { $instance } index { $( $index )? }, };","highlight_start":1,"highlight_end":75},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Generic","highlight_start":1,"highlight_end":12},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident<T>,","highlight_start":1,"highlight_end":55},{"text":"\t\t\t$( $rest_event_generic:tt )*","highlight_start":1,"highlight_end":32},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_generic )* };","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $parsed )* $module::Event<$runtime> index { $( $index )? }, };","highlight_start":1,"highlight_end":71},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// No Generic and no Instance","highlight_start":1,"highlight_end":31},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident,","highlight_start":1,"highlight_end":52},{"text":"\t\t\t$( $rest_event_no_generic_no_instance:tt )*","highlight_start":1,"highlight_end":47},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_no_generic_no_instance )* };","highlight_start":1,"highlight_end":57},{"text":"\t\t\t{ $( $parsed )* $module::Event index { $( $index )? }, };","highlight_start":1,"highlight_end":61},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the Event enum code.","highlight_start":1,"highlight_end":72},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {};","highlight_start":1,"highlight_end":14},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$module_name:ident::Event","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$( <$generic_param:ident> )?","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( { $generic_instance:ident } )?","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\tindex { $( $index:tt )? },","highlight_start":1,"highlight_end":31},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::paste::item! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t#[derive(","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\tClone, PartialEq, Eq,","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$crate::codec::Encode,","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$crate::codec::Decode,","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$crate::RuntimeDebug,","highlight_start":1,"highlight_end":26},{"text":"\t\t\t)]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":34},{"text":"\t\t\tpub enum $name {","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$( #[codec(index = $index)] )?","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\t[< $module_name $(_ $generic_instance )? >](","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t\t\t$module_name::Event < $( $generic_param )? $(, $module_name::$generic_instance )? >","highlight_start":1,"highlight_end":90},{"text":"\t\t\t\t\t),","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\timpl From<$module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >> for $name {","highlight_start":1,"highlight_end":111},{"text":"\t\t\t\t\tfn from(x: $module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >) -> Self {","highlight_start":1,"highlight_end":111},{"text":"\t\t\t\t\t\t$name::[< $module_name $(_ $generic_instance )? >](x)","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t}","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\timpl $crate::sp_std::convert::TryInto<","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t$module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >","highlight_start":1,"highlight_end":89},{"text":"\t\t\t\t> for $name {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\ttype Error = ();","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tfn try_into(self) -> $crate::sp_std::result::Result<","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t$module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >, Self::Error","highlight_start":1,"highlight_end":103},{"text":"\t\t\t\t\t> {","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\tmatch self {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t\t\tSelf::[< $module_name $(_ $generic_instance )? >](evt) => Ok(evt),","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\t\t\t\t_ => Err(()),","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t}","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_outer_event_json_metadata!(","highlight_start":1,"highlight_end":45},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$module_name::Event","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t< $( $generic_param )? $(, $module_name::$generic_instance )? >","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t$( $generic_instance )?,","highlight_start":1,"highlight_end":29},{"text":"\t\t\t)*;","highlight_start":1,"highlight_end":7},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::impl_outer_event!","def_site_span":{"file_name":"/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.0/src/event.rs","byte_start":9356,"byte_end":13152,"line_start":335,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_outer_event {","highlight_start":1,"highlight_end":32},{"text":"\t// Macro transformations (to convert invocations with incomplete parameters to the canonical","highlight_start":1,"highlight_end":94},{"text":"\t// form)","highlight_start":1,"highlight_end":10},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub enum $name:ident for $runtime:ident {","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( $rest_events:tt )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_events )* };","highlight_start":1,"highlight_end":35},{"text":"\t\t\t{};","highlight_start":1,"highlight_end":7},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Generic + Instance","highlight_start":1,"highlight_end":23},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident $instance:ident<T>,","highlight_start":1,"highlight_end":71},{"text":"\t\t\t$( $rest_event_generic_instance:tt )*","highlight_start":1,"highlight_end":41},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_generic_instance )* };","highlight_start":1,"highlight_end":51},{"text":"\t\t\t{ $( $parsed )* $module::Event<$runtime>{ $instance } index { $( $index )? }, };","highlight_start":1,"highlight_end":84},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Instance","highlight_start":1,"highlight_end":13},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident $instance:ident,","highlight_start":1,"highlight_end":68},{"text":"\t\t\t$( $rest_event_instance:tt )*","highlight_start":1,"highlight_end":33},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_instance )* };","highlight_start":1,"highlight_end":43},{"text":"\t\t\t{ $( $parsed )* $module::Event { $instance } index { $( $index )? }, };","highlight_start":1,"highlight_end":75},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Generic","highlight_start":1,"highlight_end":12},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident<T>,","highlight_start":1,"highlight_end":55},{"text":"\t\t\t$( $rest_event_generic:tt )*","highlight_start":1,"highlight_end":32},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_generic )* };","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $parsed )* $module::Event<$runtime> index { $( $index )? }, };","highlight_start":1,"highlight_end":71},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// No Generic and no Instance","highlight_start":1,"highlight_end":31},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident,","highlight_start":1,"highlight_end":52},{"text":"\t\t\t$( $rest_event_no_generic_no_instance:tt )*","highlight_start":1,"highlight_end":47},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_no_generic_no_instance )* };","highlight_start":1,"highlight_end":57},{"text":"\t\t\t{ $( $parsed )* $module::Event index { $( $index )? }, };","highlight_start":1,"highlight_end":61},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the Event enum code.","highlight_start":1,"highlight_end":72},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {};","highlight_start":1,"highlight_end":14},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$module_name:ident::Event","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$( <$generic_param:ident> )?","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( { $generic_instance:ident } )?","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\tindex { $( $index:tt )? },","highlight_start":1,"highlight_end":31},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::paste::item! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t#[derive(","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\tClone, PartialEq, Eq,","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$crate::codec::Encode,","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$crate::codec::Decode,","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$crate::RuntimeDebug,","highlight_start":1,"highlight_end":26},{"text":"\t\t\t)]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":34},{"text":"\t\t\tpub enum $name {","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$( #[codec(index = $index)] )?","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\t[< $module_name $(_ $generic_instance )? >](","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t\t\t$module_name::Event < $( $generic_param )? $(, $module_name::$generic_instance )? >","highlight_start":1,"highlight_end":90},{"text":"\t\t\t\t\t),","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\timpl From<$module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >> for $name {","highlight_start":1,"highlight_end":111},{"text":"\t\t\t\t\tfn from(x: $module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >) -> Self {","highlight_start":1,"highlight_end":111},{"text":"\t\t\t\t\t\t$name::[< $module_name $(_ $generic_instance )? >](x)","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t}","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\timpl $crate::sp_std::convert::TryInto<","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t$module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >","highlight_start":1,"highlight_end":89},{"text":"\t\t\t\t> for $name {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\ttype Error = ();","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tfn try_into(self) -> $crate::sp_std::result::Result<","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t$module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >, Self::Error","highlight_start":1,"highlight_end":103},{"text":"\t\t\t\t\t> {","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\tmatch self {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t\t\tSelf::[< $module_name $(_ $generic_instance )? >](evt) => Ok(evt),","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\t\t\t\t_ => Err(()),","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t}","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_outer_event_json_metadata!(","highlight_start":1,"highlight_end":45},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$module_name::Event","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t< $( $generic_param )? $(, $module_name::$generic_instance )? >","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t$( $generic_instance )?,","highlight_start":1,"highlight_end":29},{"text":"\t\t\t)*;","highlight_start":1,"highlight_end":7},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::impl_outer_event!","def_site_span":{"file_name":"/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.0/src/event.rs","byte_start":9356,"byte_end":13152,"line_start":335,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_outer_event {","highlight_start":1,"highlight_end":32},{"text":"\t// Macro transformations (to convert invocations with incomplete parameters to the canonical","highlight_start":1,"highlight_end":94},{"text":"\t// form)","highlight_start":1,"highlight_end":10},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub enum $name:ident for $runtime:ident {","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( $rest_events:tt )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_events )* };","highlight_start":1,"highlight_end":35},{"text":"\t\t\t{};","highlight_start":1,"highlight_end":7},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Generic + Instance","highlight_start":1,"highlight_end":23},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident $instance:ident<T>,","highlight_start":1,"highlight_end":71},{"text":"\t\t\t$( $rest_event_generic_instance:tt )*","highlight_start":1,"highlight_end":41},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_generic_instance )* };","highlight_start":1,"highlight_end":51},{"text":"\t\t\t{ $( $parsed )* $module::Event<$runtime>{ $instance } index { $( $index )? }, };","highlight_start":1,"highlight_end":84},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Instance","highlight_start":1,"highlight_end":13},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident $instance:ident,","highlight_start":1,"highlight_end":68},{"text":"\t\t\t$( $rest_event_instance:tt )*","highlight_start":1,"highlight_end":33},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_instance )* };","highlight_start":1,"highlight_end":43},{"text":"\t\t\t{ $( $parsed )* $module::Event { $instance } index { $( $index )? }, };","highlight_start":1,"highlight_end":75},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Generic","highlight_start":1,"highlight_end":12},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident<T>,","highlight_start":1,"highlight_end":55},{"text":"\t\t\t$( $rest_event_generic:tt )*","highlight_start":1,"highlight_end":32},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_generic )* };","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $parsed )* $module::Event<$runtime> index { $( $index )? }, };","highlight_start":1,"highlight_end":71},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// No Generic and no Instance","highlight_start":1,"highlight_end":31},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident,","highlight_start":1,"highlight_end":52},{"text":"\t\t\t$( $rest_event_no_generic_no_instance:tt )*","highlight_start":1,"highlight_end":47},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_no_generic_no_instance )* };","highlight_start":1,"highlight_end":57},{"text":"\t\t\t{ $( $parsed )* $module::Event index { $( $index )? }, };","highlight_start":1,"highlight_end":61},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the Event enum code.","highlight_start":1,"highlight_end":72},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {};","highlight_start":1,"highlight_end":14},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$module_name:ident::Event","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$( <$generic_param:ident> )?","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( { $generic_instance:ident } )?","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\tindex { $( $index:tt )? },","highlight_start":1,"highlight_end":31},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::paste::item! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t#[derive(","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\tClone, PartialEq, Eq,","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$crate::codec::Encode,","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$crate::codec::Decode,","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$crate::RuntimeDebug,","highlight_start":1,"highlight_end":26},{"text":"\t\t\t)]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":34},{"text":"\t\t\tpub enum $name {","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$( #[codec(index = $index)] )?","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\t[< $module_name $(_ $generic_instance )? >](","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t\t\t$module_name::Event < $( $generic_param )? $(, $module_name::$generic_instance )? >","highlight_start":1,"highlight_end":90},{"text":"\t\t\t\t\t),","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\timpl From<$module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >> for $name {","highlight_start":1,"highlight_end":111},{"text":"\t\t\t\t\tfn from(x: $module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >) -> Self {","highlight_start":1,"highlight_end":111},{"text":"\t\t\t\t\t\t$name::[< $module_name $(_ $generic_instance )? >](x)","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t}","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\timpl $crate::sp_std::convert::TryInto<","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t$module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >","highlight_start":1,"highlight_end":89},{"text":"\t\t\t\t> for $name {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\ttype Error = ();","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tfn try_into(self) -> $crate::sp_std::result::Result<","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t$module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >, Self::Error","highlight_start":1,"highlight_end":103},{"text":"\t\t\t\t\t> {","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\tmatch self {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t\t\tSelf::[< $module_name $(_ $generic_instance )? >](evt) => Ok(evt),","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\t\t\t\t_ => Err(()),","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t}","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_outer_event_json_metadata!(","highlight_start":1,"highlight_end":45},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$module_name::Event","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t< $( $generic_param )? $(, $module_name::$generic_instance )? >","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t$( $generic_instance )?,","highlight_start":1,"highlight_end":29},{"text":"\t\t\t)*;","highlight_start":1,"highlight_end":7},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::impl_outer_event!","def_site_span":{"file_name":"/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.0/src/event.rs","byte_start":9356,"byte_end":13152,"line_start":335,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_outer_event {","highlight_start":1,"highlight_end":32},{"text":"\t// Macro transformations (to convert invocations with incomplete parameters to the canonical","highlight_start":1,"highlight_end":94},{"text":"\t// form)","highlight_start":1,"highlight_end":10},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub enum $name:ident for $runtime:ident {","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( $rest_events:tt )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_events )* };","highlight_start":1,"highlight_end":35},{"text":"\t\t\t{};","highlight_start":1,"highlight_end":7},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Generic + Instance","highlight_start":1,"highlight_end":23},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident $instance:ident<T>,","highlight_start":1,"highlight_end":71},{"text":"\t\t\t$( $rest_event_generic_instance:tt )*","highlight_start":1,"highlight_end":41},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_generic_instance )* };","highlight_start":1,"highlight_end":51},{"text":"\t\t\t{ $( $parsed )* $module::Event<$runtime>{ $instance } index { $( $index )? }, };","highlight_start":1,"highlight_end":84},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Instance","highlight_start":1,"highlight_end":13},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident $instance:ident,","highlight_start":1,"highlight_end":68},{"text":"\t\t\t$( $rest_event_instance:tt )*","highlight_start":1,"highlight_end":33},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_instance )* };","highlight_start":1,"highlight_end":43},{"text":"\t\t\t{ $( $parsed )* $module::Event { $instance } index { $( $index )? }, };","highlight_start":1,"highlight_end":75},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Generic","highlight_start":1,"highlight_end":12},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident<T>,","highlight_start":1,"highlight_end":55},{"text":"\t\t\t$( $rest_event_generic:tt )*","highlight_start":1,"highlight_end":32},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_generic )* };","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $parsed )* $module::Event<$runtime> index { $( $index )? }, };","highlight_start":1,"highlight_end":71},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// No Generic and no Instance","highlight_start":1,"highlight_end":31},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident,","highlight_start":1,"highlight_end":52},{"text":"\t\t\t$( $rest_event_no_generic_no_instance:tt )*","highlight_start":1,"highlight_end":47},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_no_generic_no_instance )* };","highlight_start":1,"highlight_end":57},{"text":"\t\t\t{ $( $parsed )* $module::Event index { $( $index )? }, };","highlight_start":1,"highlight_end":61},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the Event enum code.","highlight_start":1,"highlight_end":72},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {};","highlight_start":1,"highlight_end":14},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$module_name:ident::Event","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$( <$generic_param:ident> )?","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( { $generic_instance:ident } )?","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\tindex { $( $index:tt )? },","highlight_start":1,"highlight_end":31},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::paste::item! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t#[derive(","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\tClone, PartialEq, Eq,","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$crate::codec::Encode,","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$crate::codec::Decode,","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$crate::RuntimeDebug,","highlight_start":1,"highlight_end":26},{"text":"\t\t\t)]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":34},{"text":"\t\t\tpub enum $name {","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$( #[codec(index = $index)] )?","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\t[< $module_name $(_ $generic_instance )? >](","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t\t\t$module_name::Event < $( $generic_param )? $(, $module_name::$generic_instance )? >","highlight_start":1,"highlight_end":90},{"text":"\t\t\t\t\t),","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\timpl From<$module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >> for $name {","highlight_start":1,"highlight_end":111},{"text":"\t\t\t\t\tfn from(x: $module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >) -> Self {","highlight_start":1,"highlight_end":111},{"text":"\t\t\t\t\t\t$name::[< $module_name $(_ $generic_instance )? >](x)","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t}","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\timpl $crate::sp_std::convert::TryInto<","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t$module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >","highlight_start":1,"highlight_end":89},{"text":"\t\t\t\t> for $name {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\ttype Error = ();","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tfn try_into(self) -> $crate::sp_std::result::Result<","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t$module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >, Self::Error","highlight_start":1,"highlight_end":103},{"text":"\t\t\t\t\t> {","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\tmatch self {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t\t\tSelf::[< $module_name $(_ $generic_instance )? >](evt) => Ok(evt),","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\t\t\t\t_ => Err(()),","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t}","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_outer_event_json_metadata!(","highlight_start":1,"highlight_end":45},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$module_name::Event","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t< $( $generic_param )? $(, $module_name::$generic_instance )? >","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t$( $generic_instance )?,","highlight_start":1,"highlight_end":29},{"text":"\t\t\t)*;","highlight_start":1,"highlight_end":7},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::impl_outer_event!","def_site_span":{"file_name":"/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.0/src/event.rs","byte_start":9356,"byte_end":13152,"line_start":335,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_outer_event {","highlight_start":1,"highlight_end":32},{"text":"\t// Macro transformations (to convert invocations with incomplete parameters to the canonical","highlight_start":1,"highlight_end":94},{"text":"\t// form)","highlight_start":1,"highlight_end":10},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub enum $name:ident for $runtime:ident {","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( $rest_events:tt )*","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_events )* };","highlight_start":1,"highlight_end":35},{"text":"\t\t\t{};","highlight_start":1,"highlight_end":7},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Generic + Instance","highlight_start":1,"highlight_end":23},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident $instance:ident<T>,","highlight_start":1,"highlight_end":71},{"text":"\t\t\t$( $rest_event_generic_instance:tt )*","highlight_start":1,"highlight_end":41},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_generic_instance )* };","highlight_start":1,"highlight_end":51},{"text":"\t\t\t{ $( $parsed )* $module::Event<$runtime>{ $instance } index { $( $index )? }, };","highlight_start":1,"highlight_end":84},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Instance","highlight_start":1,"highlight_end":13},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident $instance:ident,","highlight_start":1,"highlight_end":68},{"text":"\t\t\t$( $rest_event_instance:tt )*","highlight_start":1,"highlight_end":33},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_instance )* };","highlight_start":1,"highlight_end":43},{"text":"\t\t\t{ $( $parsed )* $module::Event { $instance } index { $( $index )? }, };","highlight_start":1,"highlight_end":75},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Generic","highlight_start":1,"highlight_end":12},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident<T>,","highlight_start":1,"highlight_end":55},{"text":"\t\t\t$( $rest_event_generic:tt )*","highlight_start":1,"highlight_end":32},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_generic )* };","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $parsed )* $module::Event<$runtime> index { $( $index )? }, };","highlight_start":1,"highlight_end":71},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// No Generic and no Instance","highlight_start":1,"highlight_end":31},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t$( #[codec(index = $index:tt)] )? $module:ident,","highlight_start":1,"highlight_end":52},{"text":"\t\t\t$( $rest_event_no_generic_no_instance:tt )*","highlight_start":1,"highlight_end":47},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $parsed:tt )* };","highlight_start":1,"highlight_end":24},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::impl_outer_event!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t$( #[$attr] )*;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\tModules { $( $rest_event_no_generic_no_instance )* };","highlight_start":1,"highlight_end":57},{"text":"\t\t\t{ $( $parsed )* $module::Event index { $( $index )? }, };","highlight_start":1,"highlight_end":61},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the Event enum code.","highlight_start":1,"highlight_end":72},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*;","highlight_start":1,"highlight_end":21},{"text":"\t\t$name:ident;","highlight_start":1,"highlight_end":15},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\tModules {};","highlight_start":1,"highlight_end":14},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$module_name:ident::Event","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$( <$generic_param:ident> )?","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( { $generic_instance:ident } )?","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\tindex { $( $index:tt )? },","highlight_start":1,"highlight_end":31},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t};","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::paste::item! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t#[derive(","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\tClone, PartialEq, Eq,","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$crate::codec::Encode,","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$crate::codec::Decode,","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$crate::RuntimeDebug,","highlight_start":1,"highlight_end":26},{"text":"\t\t\t)]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":34},{"text":"\t\t\tpub enum $name {","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$( #[codec(index = $index)] )?","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\t[< $module_name $(_ $generic_instance )? >](","highlight_start":1,"highlight_end":50},{"text":"\t\t\t\t\t\t$module_name::Event < $( $generic_param )? $(, $module_name::$generic_instance )? >","highlight_start":1,"highlight_end":90},{"text":"\t\t\t\t\t),","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\timpl From<$module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >> for $name {","highlight_start":1,"highlight_end":111},{"text":"\t\t\t\t\tfn from(x: $module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >) -> Self {","highlight_start":1,"highlight_end":111},{"text":"\t\t\t\t\t\t$name::[< $module_name $(_ $generic_instance )? >](x)","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t}","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\timpl $crate::sp_std::convert::TryInto<","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t$module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >","highlight_start":1,"highlight_end":89},{"text":"\t\t\t\t> for $name {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\ttype Error = ();","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\tfn try_into(self) -> $crate::sp_std::result::Result<","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t$module_name::Event < $( $generic_param, )? $( $module_name::$generic_instance )? >, Self::Error","highlight_start":1,"highlight_end":103},{"text":"\t\t\t\t\t> {","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\tmatch self {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t\t\tSelf::[< $module_name $(_ $generic_instance )? >](evt) => Ok(evt),","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\t\t\t\t_ => Err(()),","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t}","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_outer_event_json_metadata!(","highlight_start":1,"highlight_end":45},{"text":"\t\t\t$runtime;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t$name;","highlight_start":1,"highlight_end":10},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$module_name::Event","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t< $( $generic_param )? $(, $module_name::$generic_instance )? >","highlight_start":1,"highlight_end":68},{"text":"\t\t\t\t$( $generic_instance )?,","highlight_start":1,"highlight_end":29},{"text":"\t\t\t)*;","highlight_start":1,"highlight_end":7},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__impl_outer_event_json_metadata!","def_site_span":{"file_name":"/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.0/src/event.rs","byte_start":13185,"byte_end":14401,"line_start":497,"line_end":544,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __impl_outer_event_json_metadata {","highlight_start":1,"highlight_end":48},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\t$event_name:ident;","highlight_start":1,"highlight_end":21},{"text":"\t\t$( $module_name:ident::Event < $( $generic_params:path ),* > $( $instance:ident )?, )*;","highlight_start":1,"highlight_end":90},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl $runtime {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[allow(dead_code)]","highlight_start":1,"highlight_end":23},{"text":"\t\t\tpub fn outer_event_metadata() -> $crate::event::OuterEventMetadata {","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t$crate::event::OuterEventMetadata {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\tname: $crate::event::DecodeDifferent::Encode(stringify!($event_name)),","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\t\tevents: $crate::event::DecodeDifferent::Encode(&[","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\t\t\t$(","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t\t(","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t\t\tstringify!($module_name),","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\t\t$crate::event::FnEncode(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\t\t\t\t\t$module_name::Event ::< $( $generic_params ),* > ::metadata","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t),*","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t])","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$crate::__impl_outer_event_json_metadata! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t@DECL_MODULE_EVENT_FNS","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $module_name < $( $generic_params ),* > $( $instance )? ; )*","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@DECL_MODULE_EVENT_FNS","highlight_start":1,"highlight_end":25},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$module_name:ident < $( $generic_params:path ),* > $( $instance:ident )? ;","highlight_start":1,"highlight_end":78},{"text":"\t\t)*","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::paste::item! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t#[allow(dead_code)]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tpub fn [< __module_events_ $module_name $( _ $instance )? >] () ->","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\t\t&'static [$crate::event::EventMetadata]","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t\t$module_name::Event ::< $( $generic_params ),* > ::metadata()","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::__impl_outer_event_json_metadata!","def_site_span":{"file_name":"/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/frame-support-2.0.0/src/event.rs","byte_start":13185,"byte_end":14401,"line_start":497,"line_end":544,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! __impl_outer_event_json_metadata {","highlight_start":1,"highlight_end":48},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$runtime:ident;","highlight_start":1,"highlight_end":18},{"text":"\t\t$event_name:ident;","highlight_start":1,"highlight_end":21},{"text":"\t\t$( $module_name:ident::Event < $( $generic_params:path ),* > $( $instance:ident )?, )*;","highlight_start":1,"highlight_end":90},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl $runtime {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[allow(dead_code)]","highlight_start":1,"highlight_end":23},{"text":"\t\t\tpub fn outer_event_metadata() -> $crate::event::OuterEventMetadata {","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t$crate::event::OuterEventMetadata {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\tname: $crate::event::DecodeDifferent::Encode(stringify!($event_name)),","highlight_start":1,"highlight_end":76},{"text":"\t\t\t\t\tevents: $crate::event::DecodeDifferent::Encode(&[","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\t\t\t$(","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t\t(","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t\t\tstringify!($module_name),","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\t\t$crate::event::FnEncode(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\t\t\t\t\t$module_name::Event ::< $( $generic_params ),* > ::metadata","highlight_start":1,"highlight_end":69},{"text":"\t\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t),*","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t])","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t$crate::__impl_outer_event_json_metadata! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\t@DECL_MODULE_EVENT_FNS","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $module_name < $( $generic_params ),* > $( $instance )? ; )*","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@DECL_MODULE_EVENT_FNS","highlight_start":1,"highlight_end":25},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$module_name:ident < $( $generic_params:path ),* > $( $instance:ident )? ;","highlight_start":1,"highlight_end":78},{"text":"\t\t)*","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::paste::item! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t#[allow(dead_code)]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tpub fn [< __module_events_ $module_name $( _ $instance )? >] () ->","highlight_start":1,"highlight_end":71},{"text":"\t\t\t\t\t&'static [$crate::event::EventMetadata]","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t\t$module_name::Event ::< $( $generic_params ),* > ::metadata()","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"/home/ubuntu/substrate-node-template/runtime/src/lib.rs","byte_start":279,"byte_end":279,"line_start":9,"line_end":9,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::pallet_kitties::Event;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/home/ubuntu/substrate-node-template/runtime/src/lib.rs","byte_start":279,"byte_end":279,"line_start":9,"line_end":9,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::pallet_template::Event;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/home/ubuntu/substrate-node-template/runtime/src/lib.rs","byte_start":279,"byte_end":279,"line_start":9,"line_end":9,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use frame_system::Event;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/home/ubuntu/substrate-node-template/runtime/src/lib.rs","byte_start":279,"byte_end":279,"line_start":9,"line_end":9,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use pallet_balances::Event;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/home/ubuntu/substrate-node-template/runtime/src/lib.rs","byte_start":279,"byte_end":279,"line_start":9,"line_end":9,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use pallet_grandpa::Event;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/home/ubuntu/substrate-node-template/runtime/src/lib.rs","byte_start":279,"byte_end":279,"line_start":9,"line_end":9,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use pallet_kitties::Event;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/home/ubuntu/substrate-node-template/runtime/src/lib.rs","byte_start":279,"byte_end":279,"line_start":9,"line_end":9,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use pallet_poe::Event;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/home/ubuntu/substrate-node-template/runtime/src/lib.rs","byte_start":279,"byte_end":279,"line_start":9,"line_end":9,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use pallet_sudo::Event;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/home/ubuntu/substrate-node-template/runtime/src/lib.rs","byte_start":279,"byte_end":279,"line_start":9,"line_end":9,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use sp_std::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use pallet_template::Event;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `pallet_nicks`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ubuntu/substrate-node-template/runtime/src/lib.rs:329:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mconstruct_runtime!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m330\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub enum Runtime where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Block = Block,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        NodeBlock = opaque::Block,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m351\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m352\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|__^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `pallet_nicks`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::pallet_kitties::Event;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::pallet_template::Event;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse frame_system::Event;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse pallet_balances::Event;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m      and 5 other candidates\u001b[0m\n\n"}
{"message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0433`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0433`.\u001b[0m\n"}
